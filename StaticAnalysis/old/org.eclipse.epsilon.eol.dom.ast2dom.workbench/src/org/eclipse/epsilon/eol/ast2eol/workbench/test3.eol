var a : new Sequence(String);


var object : Native("java.lang.util.ArrayList");

object = new Native("java.lang.util.ArrayList");

object = new Kind(5,4,3);

for(t in Tree.all)
{
	t.getName().println();
}

operation Tree getName(): String{
	return self.name + self.children.size();
}

--model dom alias d driver EMF {metamodel = "dom.ecore"};

--var ePackage := ECore!EPackage.all.first();

//var x = new Integer();

--x.isTypeOf(Integer).println();

--operation Any isOf(type:Type) : Any
--{
--}

--var a : dom!BreakStatement;

--var b = (true and false);

--var c = new dom!BreakStatement;

--var d = 1;

-*var a := true and false;

for (containment in getDiagramClass().getContainmentReferences()) {}

for (child in getNodes().select(s|not s.abstract and (s = affixed.eType or s.eAllSuperTypes.includes(affixed.eType)))) {}

abort;

for (nodeMapping in GmfMap!NodeMapping.all.clone()) {}

var a ::= "kkk";

while(a <> true)
{
	println();
}

@annot1 this is an annotation
@annot2 this is another annotation
$pre self = 0
$post self = 0
operation Integer foo(bar: Integer, foo: Integer) : String{
	if(bar==2)
	{
		println();
	}
	a.println();
	return "this";
}*-

--var a = GmfMap!NodeMapping.a;

--var a : new GmfGraph!Direction;

--var b = Map{"a" = 1, "b" = 2};

--b.println();

--var z = Bag{1,2,3,5};

--for(i:Integer in z)
--{
--	i.println();
--}

--var x : new Integer(1);

--x.println();

--new Integer;

--var j : Bag = Bag{1,"hello",3.15};

--var s : String = "x";

--(new Foo).some;

--j.println();
-*
var k = new Integer(1);

var l : Bag(1,2,3);

var m : new Integer(1);

transaction ga, ka, la println(1,3);

for(i:Integer in a)
{
}

var b = a.select(c:Integer, d:Integer|c == 1, d == 2);

var d = new Ecore!class;

throw "this";

var c = new native("javax.swing.frame");

native("");

if(a==1)
{
	transaction trans {
		println();
	}
}

if(1)
{

}

if(a == 1)
{
	if(b == "hello")
	{
		println();
	}
	1.printnl();
}
else
{
	a.println(a, b);
}

switch(a)
{
	case 1: println(); println(); break;
	default: println(); break;
}

Ecore!class.select(c|c.name = "");

@annot1 "some string"
operation foo()
{
}

-*
var b = new Map;

b.put(1, "C");


a+1;

a.foo(1,2);

switch(a)
{
	case 1 : a.println(); a.println(); break;
	case 2 : a.println(); break;
	default : println("Foo"); break;
}

var c : OrderedSet;

c = OrderedSet{1..10};

c.println();

@annot1 "this is an annotation"
@annot2 "this is another annotation"
$pre self = 0
$post self = 0
operation Integer foo(bar: Integer, foo: Integer) : String{
	return "this";
}
*-
-*
a;

a.all;

Ecore!class.allInstances();

--GmfGraph!Direction#NSEW;

a.println();

var b = 1;

--c = "hello";

var c : OrderedSet;

c = OrderedSet{1,0,1000,2,59,64,32};

c.println();

var d = OrderedSet{"zee", "hello", "world"};

d.println();

var e = Bag{"this", "is", "a", "bag"};

GmfGraph!Direction#NSEW;

var f = Set{1, 1.5, "this"};
f.println();

var g = Set{1..3};
g.println();
*-

--var d = new Sequence(1,2,3,4,5);




