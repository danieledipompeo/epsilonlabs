pre {
  "Running ETL".println();
  var db : new DB!Database;
}
 
rule Class2Table
  transform c : OO!Class 
  to t : DB!Table, pk : DB!Column {
  
  t.name = c.name;  
  t.database = db; 
   
  pk.name = t.primaryKeyName(); 
  pk.type = "INT";  
  t.columns.add(pk);
  t.primaryKeys.add(pk);
   
  if (c.`extends`.isDefined()){ 
    
    var fk : new DB!ForeignKey;
    var childFkCol : new DB!Column;
    var parentFkCol : DB!Column;
    var parentTable : DB!Table;
    
    parentTable ::= c.`extends`;
    parentFkCol = parentTable.primaryKeys.first();
    
    childFkCol.name = parentFkCol.name;
    childFkCol.type = "INT";
    childFkCol.table = t;
    
    fk.database = db;
    fk.parent = parentFkCol;
    fk.child = childFkCol;
    fk.name = c.name + "Extends" + c.`extends`.name;
  }
}

rule SingleValuedAttribute2Column
  transform a : OO!Attribute
  to c : DB!Column {
  
  guard : not a.isMany
   
  c.name = a.name;
  c.table ::= a.owner;
  c.type = a.type.name.toDbType(); 
}

rule MultiValuedAttribute2Table  
  transform a : OO!Attribute
  to t : DB!Table, pkCol : DB!Column, valueCol : DB!Column, 
     fkCol : DB!Column, fk : DB!ForeignKey {
  
  guard : a.isMany
  
  t.name = a.valuesTableName();
  t.database = db;   
  
  pkCol.name = "id";
  pkCol.table = t;
  pkCol.type = "INT";  
  valueCol.name = "value";
  valueCol.table = t;
  valueCol.type = a.type.name.toDbType();
  
  fkCol.name = a.name + "Id";
  fkCol.table ::= a.owner;
  fkCol.type = "INT";   
   
  fk.parent = pkCol;
  fk.child = fkCol;
  fk.database = db;
}     

rule Reference2ForeignKey
  transform r : OO!Reference
  to fk : DB!ForeignKey, fkCol : DB!Column {   
  
  fkCol.table ::= r.type;
  fkCol.name = r.name + "Id"; 
  fkCol.type = "INT"; 
  fk.database = db;
  fk.parent = r.owner.equivalent().primaryKeys.first();
  fk.child = fkCol;
  fk.name = r.name;
  
}

operation DB!Table primaryKeyName() : String {
  return self.name.firstToLowerCase() + "Id";
}

operation OO!Attribute valuesTableName() : String {
  return self.owner.name + "_" + self.name.firstToUpperCase() + "Values";
}

operation Any toDbType() : String {
  var mapping : OO2DB!TypeMapping;
  mapping = OO2DB!TypeMapping.allInstances().
    select(tm|tm.source = self).first;
  if (not mapping.isDefined()){
    ("Cannot find DB type for OO type " + self + 
      ". Setting the default.").println();
    //return OO2DB!TypeMap.allInstances().first().`default`.target;
  }
  else {
    return mapping.target;
  }
}  
