pre {
	"Started transformation".println();
}

post {
	"Successfully finished transformation".println();
}

rule project
transform ant_project : t_project
to ewe_project : ewe!Project {
	ewe_project.name = ant_project.a_name;
}

rule target
transform ant_target : t_target
to ewe_target : ewe!Target {
	ewe_target.name = ant_target.a_name;
	ewe_target.containingProject = ant_target.parentNode.equivalent();
	if(ewe_target.name = ant_target.parentNode.a_default) {
		//Then this target is the default target.
		ewe_target.containingProject.defaultTarget = ewe_target;
	}
	for(d in ant_target.a_depends.split(",")) {
		if(d.length > 0) {
			var dependsTarget = t_target.all().selectOne(t | t.a_name = d);
			ewe_target.depends.add(dependsTarget.equivalent());
		}
	}
	
	var previousTask : ewe!Task;
	var currentTask : ewe!Task;
	
	for(ant_task in ant_target.children) {
		currentTask = transformTask(ant_task);
		if(currentTask.isDefined()) {
			ewe_target.targetTasks.add(currentTask);
			if(previousTask.isDefined()) {
				currentTask.follows = previousTask;
			}
		}
		//All done, set the previousTask to the current one, for the next iteration.
		previousTask = currentTask; 
	}
}

rule eoltask
transform ant_eolTask : `t_epsilon.eol`
to ewe_eolTask : ewe!EolTask {
}

rule egltask
transform ant_eglTask : `t_epsilon.egl`
to ewe_eglTask : ewe!EglTask {
}

rule evlTask
transform ant_evlTask : `t_epsilon.evl`
to ewe_evlTask : ewe!EvlTask {
}

rule eclTask
transform ant_eclTask : `t_epsilon.ecl`
to ewe_eclTask : ewe!EclTask {
}

rule etlTask
transform ant_task : `t_epsilon.etl`
to ewe_etl_task : ewe!EtlTask {
}

rule emlTask
transform ant_emlTask : `t_epsilon.eml`
to ewe_emlTask : ewe!EmlTask {
}

rule eUnitTask
transform ant_eUnitTask : `t_epsilon.eunit`
to ewe_eUnitTask : ewe!EUnitTask {
}

rule flockTask
transform ant_flockTask : `t_epsilon.flock`
to ewe_flockTask : ewe!FlockTask {
}

rule modelElement
transform ant_model : t_model
to ewe_model : ewe!ModelNestedElement {
}

rule exportsElement
transform ant_exports : t_exports
to ewe_exports : ewe!ExportsNestedElement {
}

rule usesElement
transform ant_uses : t_uses
to ewe_uses : ewe!UsesNestedElement {
}

rule startTransactionTask
transform ant_startTran : `t_epsilon.startTransaction`
to ewe_startTran : ewe!StartTransactionTask {
}

rule commitTransactionTask
transform ant_commitTran : `t_epsilon.commitTransaction`
to ewe_commitTran : ewe!CommitTransactionTask {
}

rule rollbackTransactionTask
transform ant_rollbackTran : `t_epsilon.rollbackTransaction`
to ewe_commitTran : ewe!RollbackTransactionTask {
}

rule storeModelsTask
transform ant_rollbackTran : `t_epsilon.storeModel`
to ewe_commitTran : ewe!StoreModelTask {
}

rule disposeModelTask
transform ant_disposeModel: `t_epsilon.disposeModel`
to ewe_disposeModel : ewe!DisposeModelTask {
}

rule disposeModelsTask
transform ant_disposeModels: `t_epsilon.disposeModels`
to ewe_disposeModels : ewe!DisposeModelsTask {
}

@lazy
rule parameter
transform ant_param : t_parameter 
to ewe_param : ewe!ParameterNestedElement {
	var index : Integer = 0;
	var antAttrName : String = "";
	var antAttrValue : String = "";
	var antAttrs = ant_param.getAttributes();
	while(index < antAttrs.getLength()) {
			antAttrName = antAttrs.item(index).getNodeName();
			antAttrValue = ant_param.getAttribute(antAttrName);
			ewe_param.name = antAttrName;
			ewe_param.value = antAttrValue;
			index = index + 1;
    }
}

operation transformLoadModelTask(ant_loadModel) : ewe!LoadModelTask {
		var ewe_loadModel = null;
		if(ant_loadModel.a_type = "EMF") {
			ewe_loadModel = new ewe!LoadEMFModelTask;
			for(ant_param in ant_loadModel.children) {
				setValue(ant_param.a_name, ant_param.a_value, ewe_loadModel);
			}
		} else {
			ewe_loadModel = new ewe!LoadModelTask;
		}
		return ewe_loadModel;
}

operation transformTask(ant_Task) : ewe!Task {
	var ewe_Task : ewe!Task = null;
    if(isDirectEpsilonTask(ant_Task.tagName) or isExeModelTask(ant_Task.tagName)) {
        //Handle loadModel Tasks specially
        if(ant_Task.tagName = "epsilon.loadModel") {
        	ewe_Task = transformLoadModelTask(ant_Task);
        }
        //For all other epsilon task
        else {
    		ewe_Task = ant_Task.equivalent();
		}
    	transformAttributes(ant_Task, ewe_Task);
		if(isExeModelTask(ant_Task.tagName)) {
			addExeModelTaskElements(ant_Task, ewe_Task);
		}
    	//Add nested elements such as Parameters
		addNestedElements(ant_Task, ewe_Task);
    } else { //Treat it as a generic task
		ewe_Task = transformGenericTask(ant_Task, ewe_Task);
    }
	return ewe_Task;
}

operation transformGenericTask(ant_Task, ewe_Parent) : ewe!Task {
        var ewe_Task;
		if(not ewe_Parent.isDefined()) { 
		//Then this is a high level task 
			ewe_Task = new ewe!Task;
		} 
		else {
		//Else it is a nested element. Note, we cant treat NestedElement as of type Task
		//Because EMF API breaks. (It seems to use an array which is not polymorphic)
			ewe_Task = new ewe!NestedElement;
		}
        //Set the tagname 
		ewe_Task.name = ant_Task.tagName;
		//Now copy the rest of the ant_Tasks attributes
		var antAttrs = ant_Task.getAttributes();
		var index : Integer = 0;
		var antAttrName : String = "";
		var antAttrValue : String = "";
		while(index < antAttrs.getLength()) {
			var ewe_attribute = new ewe!Attribute;
			antAttrName = antAttrs.item(index).getNodeName();
			antAttrValue = ant_Task.getAttribute(antAttrName);
			ewe_attribute.name = antAttrName;
			ewe_attribute.value = antAttrValue;
			index = index + 1;
			ewe_Task.attributes.add(ewe_attribute);
	    }
	//Check if any nested elements are present
    for(ant_nestelem in ant_Task.children) {
    	var child_Task = transformGenericTask(ant_nestelem, ewe_Task);
    	ewe_Task.taskElements.add(child_Task);
	}
	return ewe_Task;
}

operation addExeModelTaskElements(ant_exeModelTask, ewe_exeModelTask) {
	for(ant_element in ant_exeModelTask.children) {
		var ewe_element = ant_element.equivalent();
		transformAttributes(ant_element, ewe_element); 
		//Note this is extremely cumbersome to do reflectively.
		switch(ant_element.tagName) {
			case "model" : ewe_exeModelTask.models.add(ewe_element);
			case "exports" : ewe_exeModelTask.exports.add(ewe_element);
			case "uses" : ewe_exeModelTask.uses.add(ewe_element);
		}
	}	
} 

operation addNestedElements(ant_task, ewe_task) {
	for(ant_element in ant_task.children) {
		if(ant_element.tagName = "parameter") {
			//Dont transform the parameter if it is LoadEMFModelTask - since parameters are stored as attributes in the Ewe model.
			if(not ewe_task.isTypeOf(ewe!LoadEMFModelTask)) {
					ewe_task.parameters.add(ant_element.equivalent());
			}		
		}
	}
}

operation transformAttributes(ant_element, ewe_element) {
	var antAttrs = ant_element.getAttributes();
	var index : Integer = 0;
	var antAttrName : String = "";
	var antAttrValue : String = "";
	while(index < antAttrs.getLength()) {
		antAttrName = antAttrs.item(index).getNodeName();
		antAttrValue = ant_element.getAttribute(antAttrName);
		setValue(antAttrName, antAttrValue, ewe_element);
		index = index + 1;	
	}
}

operation setValue(antAttrName : String, antAttrValue : String, ewe_element) {
	var ewe_attr = ewe_element.eClass.getEStructuralFeature(antAttrName);
	if(not ewe_attr.isDefined()) {
		throw "Attribute with name : " + antAttrName + " is not a valid EWE attribute";
	}
		if(ewe_attr.isMany()) {
			//For multi-valued attributes, assume the delimiter is ",".
			var sequence = antAttrValue.split(",");
			//Transform elements in sequence to appropriate type
			for(s in sequence) {
				s = convertToType(s, ewe_attr);
			}
			ewe_element.eSet(ewe_attr, sequence);
		} else {
			ewe_element.eSet(ewe_attr, convertToType(antAttrValue, ewe_attr));			
		}	
}

//Reflective API to set contents. Too cumbersome. Dropping it.
//operation transformContents(ant_task, ewe_task) {
//	var ewe_elements_list : new Sequence;
//	for(ant_element in ant_task.children) {
// ("Ant element : " + ant_element.tagName).println();
//		var ewe_element = ant_element.equivalent();
//		transformAttributes(ant_element, ewe_element);
//		ewe_elements_list.add(ewe_element);
//		var eContainment = ewe_task.eClass.getEAllContainments.selectOne(c | c.getName() = ant_task_TagName);
//	}
	//Add the ewe_element as a child of the ewe_task
//}

operation convertToType(antAttrValue : String, ewe_attr) : Any {
	var eClassifier : String = ewe_attr.getEtype().getName();
	switch(eClassifier) {
		case "EBoolean" : return antAttrValue.asBoolean();
		case "EInteger" : return antAttrValue.asInteger();
		default : return antAttrValue;
	}
}

operation isExeModelTask(tagName : String) : Boolean {
	switch(tagName) {
		case "epsilon.eol" : continue;
		case "epsilon.egl" : continue;
		case "epsilon.evl" : continue;
		case "epsilon.ecl" : continue;
		case "epsilon.etl" : continue;
		case "epsilon.eml" : continue;
		case "epsilon.eunit" : continue;
		case "epsilon.flock" : return true;
		default : return false; 	
	}
}

operation isDirectEpsilonTask(tagName : String) : Boolean {
	switch(tagName) {
		case "epsilon.startTransaction" : continue;
		case "epsilon.commitTransaction" : continue;
		case "epsilon.rollbackTransaction" : continue;
		case "epsilon.loadModel" : continue;
		case "epsilon.storeModel" : continue;
		case "epsilon.disposeModel" : continue;
		case "epsilon.disposeModels" : return true;
		default : return false; 	
	}
}
