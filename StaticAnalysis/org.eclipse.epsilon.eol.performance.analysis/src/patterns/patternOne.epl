pattern PatternOne
	folcall : FOLMethodCallExpression
	guard: (folcall.method.name = 'select' or folcall.method.name = 'selectOne') 
	and folcall.condition.isDefined()
	and folcall.target.isTypeOf(PropertyCallExpression) 
	and	folcall.target.property.name = 'all',
	
	cond : EqualsOperatorExpression
		from: folcall.condition
		guard: cond.lhs.isTypeOf(PropertyCallExpression)
		and cond.lhs.target.resolvedContent = folcall.iterator,
	
	lhs : PropertyCallExpression
		from: cond.lhs
		guard: lhs.resolvedType.isTypeOf(ModelElementType),
		
	rhs : NameExpression
		from: cond.rhs
		guard: rhs.resolvedType.dynamicType.isTypeOf(ModelElementType),
		
	lhsType : ModelElementType
		from: lhs.resolvedType,
	rhsType : ModelElementType
		from: rhs.resolvedType.dynamicType
		guard: lhsType.ecoreType = rhsType.ecoreType
	
	{
		match {
			var r = getReference(lhs.target.resolvedType.ecoreType, lhs.property.name);
			if(r.upperBound = 1 and r.eOpposite <> null and r <> null)
			{
				if(r.eOpposite.eType = lhs.target.resolvedType.ecoreType)
				{
					return true;
				}
			}
			"not matched".println();
			return false;
		}
	} 
	
operation getReference(class: Any, name:String)
{
	for(r in class.eReferences)
	{
		if(r.name = name)
		{
			return r;
		}
	}
	return null;
}