/* A target cannot depend on itself */

context Target {

       constraint noSelfDepends {
       
       		//guard : self.containingProject.satisfies('defaultTarget')
			
			check : self.depends.excludes(self)
            
            message : self.name + " cannot depend on itself"
            
       }
       
       //Check for all tasks in a target.
       //Only a single task can not be following any other task - i.e. the start task.
       constraint singleStartTask {
       
       		guard : self.satisfies('noSelfDepends')
			
			check  {
				var notFollowingTasks : Sequence;		
				
				for(t in self.targetTasks) {
					if(not t.follows.isDefined()) {
						notFollowingTasks.add(t);
					}
				}
				return notFollowingTasks.size() = 1;
			} 
            
            message {
            	var msg : String = "The tasks: ";
            	var taskLabel : String = "";
            	for(t in notFollowingTasks) {
            		taskLabel = '"' + t.getTaskLabel() + '"';
            		msg = msg + taskLabel;
            		if(hasMore) msg = msg + ", ";
            	}
            	
            	msg = msg + " are specified as not following other tasks. Specify atleast one of them as a follower of another task."; 
            	
            	return msg;
            }
            
       }
}

/* A task cannot follow itself */

context Task {

       constraint noSelfFollows {
       
       		//guard : self.containingTarget.satisfies('noSelfDepends')
			
			check : not (self.follows = self)
          
            message : self.getTaskLabel()+ " cannot follow itself"
            
       }
       
}

/* Check if a task references a model element but the corresponding load model element has been activated */ 

context ExecutableModelTask {

		critique noNestedModel {
		
			//guard : self.satisfies('noSrcDefined')
		
			check : not (self.models.size() = 0) 
            
            message: "No models have been defined for " + self.src + " task"
		
		}
		
} 

operation Task getTaskLabel() : String {
	if(self.isKindOf(ExecutableModelTask)) {
		return self.src;
	} else {
		return self.name;
	}
}





